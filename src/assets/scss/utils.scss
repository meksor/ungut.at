@import '@/assets/scss/variables.scss';


@mixin set-coordinates($defaultProp, $coordinate, $size) {
  @if $coordinate == 'a' {
    #{$defaultProp}-top: $size;
    #{$defaultProp}-bottom: $size;
    #{$defaultProp}-left: $size;
    #{$defaultProp}-right: $size;
  } @else if $coordinate == 'y' {
    #{$defaultProp}-top: $size;
    #{$defaultProp}-bottom: $size;
  } @else if $coordinate == 'x' {
    #{$defaultProp}-left: $size;
    #{$defaultProp}-right: $size;
  } @else {
    #{$defaultProp}-#{$coordinate}: $size;
  }
}

// Mixin to generate classes for a given property with optional coordinates
@mixin class-by-prop($defaultProp, $propName, $useCoords, $values) {
  // Define the maximum iteration value
// Loop through the sizes from 0 to the maximum iteration
  @each $key, $size in $values {
    // Generate a base class for the given property and size
    .#{$propName}-#{$key} {
      #{$defaultProp}: $size;
    }
    // If useCoords is true, generate classes with different coordinates
    @if $useCoords {
      @each $keyCoordinate, $coordinate in $coordsArray {
        .#{$propName}#{$keyCoordinate}-#{$key} {
          @include set-coordinates($defaultProp, $coordinate, $size);
        }
      }
    }
  }
  // Loop through the breakpoints and generate media queries
  @each $keyBreakpoint, $media-query in $breakpoints {
    // Check if it's not the 'xl' breakpoint
    @if $keyBreakpoint != 'xl' {
      @media (min-width: #{map-get($media-query, min-width)}) and (max-width: #{map-get($media-query, max-width)}) {
        // Loop through the sizes again and generate classes for the current breakpoint
        @each $key, $size in $values {
          .#{$propName}-#{$keyBreakpoint}-#{$key} {
            #{$defaultProp}: $size;
          }
          // If useCoords is true, generate classes with different coordinates for the current breakpoint
          @if $useCoords {
            @each $keyCoordinate, $coordinate in $coordsArray {
              .#{$propName}#{$keyCoordinate}-#{$keyBreakpoint}-#{$key} {
                @include set-coordinates($defaultProp, $coordinate, $size);
              }
            }
          }
        }
      }
    } @else {
      // For 'xl' breakpoint (no max-width specified), generate classes without a max-width condition
      @media (min-width: #{map-get($media-query, min-width)}) {
        // Loop through the sizes again and generate classes for the 'xl' breakpoint
        @each $key, $size in $values {
          .#{$propName}-#{$keyBreakpoint}-#{$key} {
            #{$defaultProp}: $size;
          }
          // If useCoords is true, generate classes with different coordinates for the 'xl' breakpoint
          @if $useCoords {
            @each $keyCoordinate, $coordinate in $coordsArray {
              .#{$propName}#{$keyCoordinate}-#{$keyBreakpoint}-#{$key} {
                @include set-coordinates($defaultProp, $coordinate, $size);
              }
            }
          }
        }
      }
    }
    // Apply media queries for sm-up breakpoint and up
    @media (min-width: #{map-get($media-query, min-width)}) {
      // Loop through the sizes again and generate classes for the 'sm-up' breakpoint
      @each $key, $size in $values {
        .#{$propName}-#{$keyBreakpoint}-up-#{$key} {
          #{$defaultProp}: $size;
        }
        // If useCoords is true, generate classes with different coordinates for the 'sm-up' breakpoint
        @if $useCoords {
          @each $keyCoordinate, $coordinate in $coordsArray {
            .#{$propName}#{$keyCoordinate}-#{$keyBreakpoint}-up-#{$key} {
              @include set-coordinates($defaultProp, $coordinate, $size);
            }
          }
        }
      }
    }
  }
}

// Generate margin classes with comments
@include class-by-prop('margin', 'm', true, $spacing);
// Generate padding classes with comments
@include class-by-prop('padding', 'p', true, $spacing);

// Generate padding classes with comments
@include class-by-prop('padding', 'p', true, $spacing);
@include class-by-prop('--elevation', 'el', false, $elevations);
@include class-by-prop('font-size', 'fs', false, $font-sizes);

@each $name, $value in $font-weights {
  .fw-#{$name} {
    font-weight: $value;
  }
}

// Width / Height helpers
$one-hundred: 100;

@for $percent from 0 through $one-hundred {
  .h-#{$percent} {
    height: $percent * 1%;
  }
  .w-#{$percent} {
    width: $percent * 1%;
  }
}

@each $name, $value in $dimension-dividers {
  .h-#{$name} {
    height: $value * 100%;
  }
  .w-#{$name} {
    width: $value * 100%;
  }

  @each $bp, $media-query in $breakpoints {
    @media (min-width: #{map-get($media-query, min-width)}) {
      .h-#{$name}-#{$bp}-up {
        height: $value * 100%;
      }
      .w-#{$name}-#{$bp}-up {
        width: $value * 100%;
      }
    }

    @if $bp != 'xl' {
      @media (min-width: #{map-get($media-query, min-width)}) and (max-width: #{map-get($media-query, max-width)}) {
        .h-#{$name}-#{$bp} {
          height: $value * 100%;
        }
        .w-#{$name}-#{$bp} {
          width: $value * 100%;
        }
      }
    } @else {
      @media (min-width: #{map-get($media-query, min-width)}) {
        .h-#{$name}-#{$bp} {
          height: $value * 100%;
        }
        .w-#{$name}-#{$bp} {
          width: $value * 100%;
        }

      }
    }
  }
}

// Color Variables
@each $name, $map in $colors {
  @each $subcat, $color in $map {
    :root {
      --color-#{$name}-#{$subcat}: #{$color};
    }

    @if $subcat =='base' {
      :root {
        --color-#{$name}: #{$color};
      }
    }
  }
}


// Text Align
.ta-center {
  text-align: center;
}
.ta-start {
  text-align: start;
}
.ta-end {
  text-align: end;
}